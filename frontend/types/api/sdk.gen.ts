// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from '@hey-api/client-nuxt';
import type { ApiAiLogsGetCollectionData, ApiAiLogsGetCollectionResponse, ApiAiLogsPostData, ApiAiLogsPostResponse, ApiAiLogsPostError, ApiAiLogsIdDeleteData, ApiAiLogsIdDeleteResponse, ApiAiLogsIdDeleteError, ApiAiLogsIdGetData, ApiAiLogsIdGetResponse, ApiAiLogsIdGetError, ApiAiLogsIdPatchData, ApiAiLogsIdPatchResponse, ApiAiLogsIdPatchError, ApiGamesGetCollectionData, ApiGamesGetCollectionResponse, ApiGamesPostData, ApiGamesPostResponse, ApiGamesPostError, ApiGamesIdDeleteData, ApiGamesIdDeleteResponse, ApiGamesIdDeleteError, ApiGamesIdGetData, ApiGamesIdGetResponse, ApiGamesIdGetError, ApiGamesIdPatchData, ApiGamesIdPatchResponse, ApiGamesIdPatchError, LoginCheckPostData, LoginCheckPostResponse, ApiPlayersGetCollectionData, ApiPlayersGetCollectionResponse, ApiPlayersPostData, ApiPlayersPostResponse, ApiPlayersPostError, ApiPlayersIdDeleteData, ApiPlayersIdDeleteResponse, ApiPlayersIdDeleteError, ApiPlayersIdGetData, ApiPlayersIdGetResponse, ApiPlayersIdGetError, ApiPlayersIdPatchData, ApiPlayersIdPatchResponse, ApiPlayersIdPatchError, ApiPlayerTraitsGetCollectionData, ApiPlayerTraitsGetCollectionResponse, ApiPlayerTraitsPostData, ApiPlayerTraitsPostResponse, ApiPlayerTraitsPostError, ApiPlayerTraitsIdDeleteData, ApiPlayerTraitsIdDeleteResponse, ApiPlayerTraitsIdDeleteError, ApiPlayerTraitsIdGetData, ApiPlayerTraitsIdGetResponse, ApiPlayerTraitsIdGetError, ApiPlayerTraitsIdPatchData, ApiPlayerTraitsIdPatchResponse, ApiPlayerTraitsIdPatchError, ApiTraitDefsGetCollectionData, ApiTraitDefsGetCollectionResponse, ApiTraitDefsPostData, ApiTraitDefsPostResponse, ApiTraitDefsPostError, ApiTraitDefsIdDeleteData, ApiTraitDefsIdDeleteResponse, ApiTraitDefsIdDeleteError, ApiTraitDefsIdGetData, ApiTraitDefsIdGetResponse, ApiTraitDefsIdGetError, ApiTraitDefsIdPatchData, ApiTraitDefsIdPatchResponse, ApiTraitDefsIdPatchError, GetCurrentUserData, GetCurrentUserResponse, GetCurrentUserError, ApiUsersGetCollectionData, ApiUsersGetCollectionResponse, ApiUsersPostData, ApiUsersPostResponse, ApiUsersPostError, ApiUsersIdDeleteData, ApiUsersIdDeleteResponse, ApiUsersIdDeleteError, ApiUsersIdGetData, ApiUsersIdGetResponse, ApiUsersIdGetError, ApiUsersIdPatchData, ApiUsersIdPatchResponse, ApiUsersIdPatchError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieves the collection of AiLog resources.
 * Retrieves the collection of AiLog resources.
 */
export const apiAiLogsGetCollection = <TComposable extends Composable, DefaultT extends ApiAiLogsGetCollectionResponse = ApiAiLogsGetCollectionResponse>(options: Options<TComposable, ApiAiLogsGetCollectionData, ApiAiLogsGetCollectionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiAiLogsGetCollectionResponse | DefaultT, unknown, DefaultT>({
        url: '/api/ai_logs',
        ...options
    });
};

/**
 * Creates a AiLog resource.
 * Creates a AiLog resource.
 */
export const apiAiLogsPost = <TComposable extends Composable, DefaultT extends ApiAiLogsPostResponse = ApiAiLogsPostResponse>(options: Options<TComposable, ApiAiLogsPostData, ApiAiLogsPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, ApiAiLogsPostResponse | DefaultT, ApiAiLogsPostError, DefaultT>({
        url: '/api/ai_logs',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the AiLog resource.
 * Removes the AiLog resource.
 */
export const apiAiLogsIdDelete = <TComposable extends Composable, DefaultT extends ApiAiLogsIdDeleteResponse = ApiAiLogsIdDeleteResponse>(options: Options<TComposable, ApiAiLogsIdDeleteData, ApiAiLogsIdDeleteResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, ApiAiLogsIdDeleteResponse | DefaultT, ApiAiLogsIdDeleteError, DefaultT>({
        url: '/api/ai_logs/{id}',
        ...options
    });
};

/**
 * Retrieves a AiLog resource.
 * Retrieves a AiLog resource.
 */
export const apiAiLogsIdGet = <TComposable extends Composable, DefaultT extends ApiAiLogsIdGetResponse = ApiAiLogsIdGetResponse>(options: Options<TComposable, ApiAiLogsIdGetData, ApiAiLogsIdGetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiAiLogsIdGetResponse | DefaultT, ApiAiLogsIdGetError, DefaultT>({
        url: '/api/ai_logs/{id}',
        ...options
    });
};

/**
 * Updates the AiLog resource.
 * Updates the AiLog resource.
 */
export const apiAiLogsIdPatch = <TComposable extends Composable, DefaultT extends ApiAiLogsIdPatchResponse = ApiAiLogsIdPatchResponse>(options: Options<TComposable, ApiAiLogsIdPatchData, ApiAiLogsIdPatchResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, ApiAiLogsIdPatchResponse | DefaultT, ApiAiLogsIdPatchError, DefaultT>({
        url: '/api/ai_logs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Game resources.
 * Retrieves the collection of Game resources.
 */
export const apiGamesGetCollection = <TComposable extends Composable, DefaultT extends ApiGamesGetCollectionResponse = ApiGamesGetCollectionResponse>(options: Options<TComposable, ApiGamesGetCollectionData, ApiGamesGetCollectionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiGamesGetCollectionResponse | DefaultT, unknown, DefaultT>({
        url: '/api/games',
        ...options
    });
};

/**
 * Creates a Game resource.
 * Creates a Game resource.
 */
export const apiGamesPost = <TComposable extends Composable, DefaultT extends ApiGamesPostResponse = ApiGamesPostResponse>(options: Options<TComposable, ApiGamesPostData, ApiGamesPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, ApiGamesPostResponse | DefaultT, ApiGamesPostError, DefaultT>({
        url: '/api/games',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Game resource.
 * Removes the Game resource.
 */
export const apiGamesIdDelete = <TComposable extends Composable, DefaultT extends ApiGamesIdDeleteResponse = ApiGamesIdDeleteResponse>(options: Options<TComposable, ApiGamesIdDeleteData, ApiGamesIdDeleteResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, ApiGamesIdDeleteResponse | DefaultT, ApiGamesIdDeleteError, DefaultT>({
        url: '/api/games/{id}',
        ...options
    });
};

/**
 * Retrieves a Game resource.
 * Retrieves a Game resource.
 */
export const apiGamesIdGet = <TComposable extends Composable, DefaultT extends ApiGamesIdGetResponse = ApiGamesIdGetResponse>(options: Options<TComposable, ApiGamesIdGetData, ApiGamesIdGetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiGamesIdGetResponse | DefaultT, ApiGamesIdGetError, DefaultT>({
        url: '/api/games/{id}',
        ...options
    });
};

/**
 * Updates the Game resource.
 * Updates the Game resource.
 */
export const apiGamesIdPatch = <TComposable extends Composable, DefaultT extends ApiGamesIdPatchResponse = ApiGamesIdPatchResponse>(options: Options<TComposable, ApiGamesIdPatchData, ApiGamesIdPatchResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, ApiGamesIdPatchResponse | DefaultT, ApiGamesIdPatchError, DefaultT>({
        url: '/api/games/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Creates a user token.
 * Creates a user token.
 */
export const loginCheckPost = <TComposable extends Composable, DefaultT extends LoginCheckPostResponse = LoginCheckPostResponse>(options: Options<TComposable, LoginCheckPostData, LoginCheckPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, LoginCheckPostResponse | DefaultT, unknown, DefaultT>({
        url: '/api/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Player resources.
 * Retrieves the collection of Player resources.
 */
export const apiPlayersGetCollection = <TComposable extends Composable, DefaultT extends ApiPlayersGetCollectionResponse = ApiPlayersGetCollectionResponse>(options: Options<TComposable, ApiPlayersGetCollectionData, ApiPlayersGetCollectionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiPlayersGetCollectionResponse | DefaultT, unknown, DefaultT>({
        url: '/api/players',
        ...options
    });
};

/**
 * Creates a Player resource.
 * Creates a Player resource.
 */
export const apiPlayersPost = <TComposable extends Composable, DefaultT extends ApiPlayersPostResponse = ApiPlayersPostResponse>(options: Options<TComposable, ApiPlayersPostData, ApiPlayersPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, ApiPlayersPostResponse | DefaultT, ApiPlayersPostError, DefaultT>({
        url: '/api/players',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Player resource.
 * Removes the Player resource.
 */
export const apiPlayersIdDelete = <TComposable extends Composable, DefaultT extends ApiPlayersIdDeleteResponse = ApiPlayersIdDeleteResponse>(options: Options<TComposable, ApiPlayersIdDeleteData, ApiPlayersIdDeleteResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, ApiPlayersIdDeleteResponse | DefaultT, ApiPlayersIdDeleteError, DefaultT>({
        url: '/api/players/{id}',
        ...options
    });
};

/**
 * Retrieves a Player resource.
 * Retrieves a Player resource.
 */
export const apiPlayersIdGet = <TComposable extends Composable, DefaultT extends ApiPlayersIdGetResponse = ApiPlayersIdGetResponse>(options: Options<TComposable, ApiPlayersIdGetData, ApiPlayersIdGetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiPlayersIdGetResponse | DefaultT, ApiPlayersIdGetError, DefaultT>({
        url: '/api/players/{id}',
        ...options
    });
};

/**
 * Updates the Player resource.
 * Updates the Player resource.
 */
export const apiPlayersIdPatch = <TComposable extends Composable, DefaultT extends ApiPlayersIdPatchResponse = ApiPlayersIdPatchResponse>(options: Options<TComposable, ApiPlayersIdPatchData, ApiPlayersIdPatchResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, ApiPlayersIdPatchResponse | DefaultT, ApiPlayersIdPatchError, DefaultT>({
        url: '/api/players/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of PlayerTrait resources.
 * Retrieves the collection of PlayerTrait resources.
 */
export const apiPlayerTraitsGetCollection = <TComposable extends Composable, DefaultT extends ApiPlayerTraitsGetCollectionResponse = ApiPlayerTraitsGetCollectionResponse>(options: Options<TComposable, ApiPlayerTraitsGetCollectionData, ApiPlayerTraitsGetCollectionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiPlayerTraitsGetCollectionResponse | DefaultT, unknown, DefaultT>({
        url: '/api/player_traits',
        ...options
    });
};

/**
 * Creates a PlayerTrait resource.
 * Creates a PlayerTrait resource.
 */
export const apiPlayerTraitsPost = <TComposable extends Composable, DefaultT extends ApiPlayerTraitsPostResponse = ApiPlayerTraitsPostResponse>(options: Options<TComposable, ApiPlayerTraitsPostData, ApiPlayerTraitsPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, ApiPlayerTraitsPostResponse | DefaultT, ApiPlayerTraitsPostError, DefaultT>({
        url: '/api/player_traits',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the PlayerTrait resource.
 * Removes the PlayerTrait resource.
 */
export const apiPlayerTraitsIdDelete = <TComposable extends Composable, DefaultT extends ApiPlayerTraitsIdDeleteResponse = ApiPlayerTraitsIdDeleteResponse>(options: Options<TComposable, ApiPlayerTraitsIdDeleteData, ApiPlayerTraitsIdDeleteResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, ApiPlayerTraitsIdDeleteResponse | DefaultT, ApiPlayerTraitsIdDeleteError, DefaultT>({
        url: '/api/player_traits/{id}',
        ...options
    });
};

/**
 * Retrieves a PlayerTrait resource.
 * Retrieves a PlayerTrait resource.
 */
export const apiPlayerTraitsIdGet = <TComposable extends Composable, DefaultT extends ApiPlayerTraitsIdGetResponse = ApiPlayerTraitsIdGetResponse>(options: Options<TComposable, ApiPlayerTraitsIdGetData, ApiPlayerTraitsIdGetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiPlayerTraitsIdGetResponse | DefaultT, ApiPlayerTraitsIdGetError, DefaultT>({
        url: '/api/player_traits/{id}',
        ...options
    });
};

/**
 * Updates the PlayerTrait resource.
 * Updates the PlayerTrait resource.
 */
export const apiPlayerTraitsIdPatch = <TComposable extends Composable, DefaultT extends ApiPlayerTraitsIdPatchResponse = ApiPlayerTraitsIdPatchResponse>(options: Options<TComposable, ApiPlayerTraitsIdPatchData, ApiPlayerTraitsIdPatchResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, ApiPlayerTraitsIdPatchResponse | DefaultT, ApiPlayerTraitsIdPatchError, DefaultT>({
        url: '/api/player_traits/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of TraitDef resources.
 * Retrieves the collection of TraitDef resources.
 */
export const apiTraitDefsGetCollection = <TComposable extends Composable, DefaultT extends ApiTraitDefsGetCollectionResponse = ApiTraitDefsGetCollectionResponse>(options: Options<TComposable, ApiTraitDefsGetCollectionData, ApiTraitDefsGetCollectionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiTraitDefsGetCollectionResponse | DefaultT, unknown, DefaultT>({
        url: '/api/trait_defs',
        ...options
    });
};

/**
 * Creates a TraitDef resource.
 * Creates a TraitDef resource.
 */
export const apiTraitDefsPost = <TComposable extends Composable, DefaultT extends ApiTraitDefsPostResponse = ApiTraitDefsPostResponse>(options: Options<TComposable, ApiTraitDefsPostData, ApiTraitDefsPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, ApiTraitDefsPostResponse | DefaultT, ApiTraitDefsPostError, DefaultT>({
        url: '/api/trait_defs',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the TraitDef resource.
 * Removes the TraitDef resource.
 */
export const apiTraitDefsIdDelete = <TComposable extends Composable, DefaultT extends ApiTraitDefsIdDeleteResponse = ApiTraitDefsIdDeleteResponse>(options: Options<TComposable, ApiTraitDefsIdDeleteData, ApiTraitDefsIdDeleteResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, ApiTraitDefsIdDeleteResponse | DefaultT, ApiTraitDefsIdDeleteError, DefaultT>({
        url: '/api/trait_defs/{id}',
        ...options
    });
};

/**
 * Retrieves a TraitDef resource.
 * Retrieves a TraitDef resource.
 */
export const apiTraitDefsIdGet = <TComposable extends Composable, DefaultT extends ApiTraitDefsIdGetResponse = ApiTraitDefsIdGetResponse>(options: Options<TComposable, ApiTraitDefsIdGetData, ApiTraitDefsIdGetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiTraitDefsIdGetResponse | DefaultT, ApiTraitDefsIdGetError, DefaultT>({
        url: '/api/trait_defs/{id}',
        ...options
    });
};

/**
 * Updates the TraitDef resource.
 * Updates the TraitDef resource.
 */
export const apiTraitDefsIdPatch = <TComposable extends Composable, DefaultT extends ApiTraitDefsIdPatchResponse = ApiTraitDefsIdPatchResponse>(options: Options<TComposable, ApiTraitDefsIdPatchData, ApiTraitDefsIdPatchResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, ApiTraitDefsIdPatchResponse | DefaultT, ApiTraitDefsIdPatchError, DefaultT>({
        url: '/api/trait_defs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a User resource.
 * Retrieves a User resource.
 */
export const getCurrentUser = <TComposable extends Composable, DefaultT extends GetCurrentUserResponse = GetCurrentUserResponse>(options: Options<TComposable, GetCurrentUserData, GetCurrentUserResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetCurrentUserResponse | DefaultT, GetCurrentUserError, DefaultT>({
        url: '/api/user/me',
        ...options
    });
};

/**
 * Retrieves the collection of User resources.
 * Retrieves the collection of User resources.
 */
export const apiUsersGetCollection = <TComposable extends Composable, DefaultT extends ApiUsersGetCollectionResponse = ApiUsersGetCollectionResponse>(options: Options<TComposable, ApiUsersGetCollectionData, ApiUsersGetCollectionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiUsersGetCollectionResponse | DefaultT, unknown, DefaultT>({
        url: '/api/users',
        ...options
    });
};

/**
 * Creates a User resource.
 * Creates a User resource.
 */
export const apiUsersPost = <TComposable extends Composable, DefaultT extends ApiUsersPostResponse = ApiUsersPostResponse>(options: Options<TComposable, ApiUsersPostData, ApiUsersPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, ApiUsersPostResponse | DefaultT, ApiUsersPostError, DefaultT>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the User resource.
 * Removes the User resource.
 */
export const apiUsersIdDelete = <TComposable extends Composable, DefaultT extends ApiUsersIdDeleteResponse = ApiUsersIdDeleteResponse>(options: Options<TComposable, ApiUsersIdDeleteData, ApiUsersIdDeleteResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, ApiUsersIdDeleteResponse | DefaultT, ApiUsersIdDeleteError, DefaultT>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Retrieves a User resource.
 * Retrieves a User resource.
 */
export const apiUsersIdGet = <TComposable extends Composable, DefaultT extends ApiUsersIdGetResponse = ApiUsersIdGetResponse>(options: Options<TComposable, ApiUsersIdGetData, ApiUsersIdGetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ApiUsersIdGetResponse | DefaultT, ApiUsersIdGetError, DefaultT>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Updates the User resource.
 * Updates the User resource.
 */
export const apiUsersIdPatch = <TComposable extends Composable, DefaultT extends ApiUsersIdPatchResponse = ApiUsersIdPatchResponse>(options: Options<TComposable, ApiUsersIdPatchData, ApiUsersIdPatchResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, ApiUsersIdPatchResponse | DefaultT, ApiUsersIdPatchError, DefaultT>({
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options?.headers
        }
    });
};